{
  "quiz": {
    "q270": {
      "question": "What is Java?",
      "options": [
        "A programming language",
        "A type of coffee",
        "An operating system",
        "A brand of computer"
      ],
      "answer": "A programming language"
    },
    "q271": {
      "question": "Which keyword is used to define a class in Java?",
      "options": [
        "class",
        "type",
        "struct",
        "interface"
      ],
      "answer": "class"
    },
    "q272": {
      "question": "What is the entry point of a Java program?",
      "options": [
        "main",
        "start",
        "begin",
        "init"
      ],
      "answer": "main"
    },
    "q273": {
      "question": "How do you declare a variable in Java?",
      "options": [
        "v int = 5;",
        "int v = 5;",
        "variable v = 5;",
        "v = 5; int;"
      ],
      "answer": "int v = 5;"
    },
    "q274": {
      "question": "What is the output of the following code snippet: `System.out.println(5 + \"Java\")`?",
      "options": [
        "5Java",
        "56",
        "Error",
        "Java5"
      ],
      "answer": "5Java"
    },
    "q275": {
      "question": "Which operator is used for equality testing in Java?",
      "options": [
        "==",
        "===",
        "!=",
        "<>"
      ],
      "answer": "=="
    },
    "q276": {
      "question": "What is the purpose of the 'break' statement in Java?",
      "options": [
        "To exit a loop or switch statement",
        "To skip the current iteration of a loop",
        "To end the program",
        "To break the execution flow"
      ],
      "answer": "To exit a loop or switch statement"
    },
    "q277": {
      "question": "How do you create a new instance of a class in Java?",
      "options": [
        "Class.newInstance()",
        "new Object()",
        "createObject(Class)",
        "Object.createInstance(Class)"
      ],
      "answer": "new Object()"
    },
    "q278": {
      "question": "What is the default value of an integer variable in Java?",
      "options": [
        "0",
        "null",
        "1",
        "undefined"
      ],
      "answer": "0"
    },
    "q279": {
      "question": "Which data type is used to store floating-point numbers with double precision?",
      "options": [
        "float",
        "double",
        "decimal",
        "real"
      ],
      "answer": "double"
    },
    "q280": {
      "question": "What is the purpose of the 'public' keyword in Java?",
      "options": [
        "To specify the access level of a class",
        "To define a public method",
        "To declare a public variable",
        "To indicate the main method"
      ],
      "answer": "To specify the access level of a class"
    },
    "q281": {
      "question": "What is the role of the 'else' statement in an 'if-else' construct?",
      "options": [
        "To handle errors",
        "To specify the alternative block of code when the 'if' condition is false",
        "To terminate the program",
        "To indicate the end of the 'if' block"
      ],
      "answer": "To specify the alternative block of code when the 'if' condition is false"
    },
    "q282": {
      "question": "Which loop is used when you don't know the number of iterations in advance?",
      "options": [
        "for",
        "while",
        "do-while",
        "foreach"
      ],
      "answer": "while"
    },
    "q283": {
      "question": "What is the purpose of the 'return' statement in Java?",
      "options": [
        "To print a value to the console",
        "To exit a loop",
        "To exit a method and optionally return a value",
        "To return a boolean value"
      ],
      "answer": "To exit a method and optionally return a value"
    },
    "q284": {
      "question": "Which Java keyword is used to define a constant?",
      "options": [
        "final",
        "const",
        "static",
        "constant"
      ],
      "answer": "final"
    },
    "q285": {
      "question": "What is the purpose of the 'super' keyword in Java?",
      "options": [
        "To call the superclass constructor",
        "To refer to the current instance of a class",
        "To indicate a superclass method",
        "To access static members of a class"
      ],
      "answer": "To call the superclass constructor"
    },
    "q286": {
      "question": "Which Java operator is used for concatenating strings?",
      "options": [
        "&",
        "+",
        "|",
        "-"
      ],
      "answer": "+"
    },
    "q287": {
      "question": "What is the purpose of the 'NullPointerException' in Java?",
      "options": [
        "To indicate that a variable is not initialized",
        "To handle arithmetic errors",
        "To indicate a division by zero",
        "To indicate an attempt to access an object that is null"
      ],
      "answer": "To indicate an attempt to access an object that is null"
    },
    "q288": {
      "question": "Which Java keyword is used to implement multiple inheritance?",
      "options": [
        "extends",
        "implements",
        "interface",
        "inherit"
      ],
      "answer": "implements"
    },
    "q289": {
      "question": "What is the purpose of the 'static' keyword in Java?",
      "options": [
        "To specify that a variable is constant",
        "To define a class method or variable",
        "To indicate the start of the program",
        "To allocate memory for an object"
      ],
      "answer": "To define a class method or variable"
    },
    "q290": {
      "question": "Which method is called when an object is created in Java?",
      "options": [
        "init()",
        "start()",
        "create()",
        "constructor()"
      ],
      "answer": "constructor()"
    },
    "quiz": {
      "q291": {
        "question": "What is a variable in Java?",
        "options": [
          "A reserved keyword",
          "A data type",
          "A named storage location for holding data",
          "A constant value"
        ],
        "answer": "A named storage location for holding data"
      },
      "q292": {
        "question": "How do you comment a single line in Java?",
        "options": [
          "// This is a comment",
          "# This is a comment",
          "/** This is a comment */",
          "/* This is a comment */"
        ],
        "answer": "// This is a comment"
      },
      "q293": {
        "question": "What is the syntax for declaring a constant in Java?",
        "options": [
          "const int MY_CONSTANT = 10;",
          "final int MY_CONSTANT = 10;",
          "constant int MY_CONSTANT = 10;",
          "let MY_CONSTANT = 10;"
        ],
        "answer": "final int MY_CONSTANT = 10;"
      },
      "q294": {
        "question": "How do you declare a method in Java?",
        "options": [
          "method void myMethod() {}",
          "void myMethod() {}",
          "function myMethod() {}",
          "def myMethod() {}"
        ],
        "answer": "void myMethod() {}"
      },
      "q295": {
        "question": "What is the purpose of the 'new' keyword in Java?",
        "options": [
          "To create a new instance of a class",
          "To declare a new variable",
          "To define a new method",
          "To allocate memory for a variable"
        ],
        "answer": "To create a new instance of a class"
      },
      "q296": {
        "question": "What is the default value of a boolean variable in Java?",
        "options": [
          "false",
          "true",
          "0",
          "null"
        ],
        "answer": "false"
      },
      "q297": {
        "question": "How do you convert a string to an integer in Java?",
        "options": [
          "int x = parseInteger(myString);",
          "int x = Integer.parse(myString);",
          "int x = Integer.parseInt(myString);",
          "int x = stringToInteger(myString);"
        ],
        "answer": "int x = Integer.parseInt(myString);"
      },
      "q298": {
        "question": "What is the purpose of the 'this' keyword in Java?",
        "options": [
          "To create a new object",
          "To refer to the current instance of a class",
          "To call a static method",
          "To define a new variable"
        ],
        "answer": "To refer to the current instance of a class"
      },
      "q299": {
        "question": "What is the difference between '== 'and '.equals()' in Java when comparing strings?",
        "options": [
          "'==' compares object references, '.equals()' compares the content of the strings",
          "'==' compares the content of the strings, '.equals()' compares object references",
          "Both are identical in their functionality",
          "Neither '==' nor '.equals()' can be used to compare strings"
        ],
        "answer": "'==' compares object references, '.equals()' compares the content of the strings"
      },
      "q300": {
        "question": "Which keyword is used to implement exception handling in Java?",
        "options": [
          "throw",
          "try",
          "catch",
          "exception"
        ],
        "answer": "try"
      },
      "q301": {
        "question": "What is the purpose of the 'instanceof' operator in Java?",
        "options": [
          "To check if an object is an instance of a specific class",
          "To create a new instance of a class",
          "To cast an object to another type",
          "To compare two objects for equality"
        ],
        "answer": "To check if an object is an instance of a specific class"
      },
      "q302": {
        "question": "How do you declare an array in Java?",
        "options": [
          "array int[] myArray;",
          "int myArray[];",
          "int[] myArray;",
          "myArray[] int;"
        ],
        "answer": "int[] myArray;"
      },
      "q303": {
        "question": "What is the purpose of the 'for' loop in Java?",
        "options": [
          "To declare variables",
          "To handle exceptions",
          "To create an infinite loop",
          "To iterate over a block of code a specific number of times"
        ],
        "answer": "To iterate over a block of code a specific number of times"
      },
      "q304": {
        "question": "How do you exit a loop prematurely in Java?",
        "options": [
          "exit",
          "break",
          "stop",
          "end"
        ],
        "answer": "break"
      },
      "q305": {
        "question": "What is the purpose of the 'do-while' loop in Java?",
        "options": [
          "To iterate over a block of code a specific number of times",
          "To create an infinite loop",
          "To declare variables",
          "To guarantee that the loop code is executed at least once"
        ],
        "answer": "To guarantee that the loop code is executed at least once"
      },
      "q306": {
        "question": "Which access modifier is used for a method that should be accessible from any class?",
        "options": [
          "private",
          "protected",
          "public",
          "default"
        ],
        "answer": "public"
      },
      "q307": {
        "question": "What is the purpose of the 'continue' statement in Java?",
        "options": [
          "To end the program",
          "To skip the rest of the code in a loop and start the next iteration",
          "To exit a loop",
          "To print a message to the console"
        ],
        "answer": "To skip the rest of the code in a loop and start the next iteration"
      },
      "q308": {
        "question": "What is the role of the 'import' statement in Java?",
        "options": [
          "To include external libraries in the code",
          "To declare variables",
          "To define constants",
          "To create instances of classes"
        ],
        "answer": "To include external libraries in the code"
      },
      "q309": {
        "question": "How do you define a constructor in Java?",
        "options": [
          "method Constructor() {}",
          "Constructor() {}",
          "init Constructor() {}",
          "create Constructor() {}"
        ],
        "answer": "Constructor() {}"
      },
      "q310": {
        "question": "What is the purpose of the 'switch' statement in Java?",
        "options": [
          "To compare two strings",
          "To handle exceptions",
          "To create an alternative block of code based on the value of an expression",
          "To declare variables"
        ],
        "answer": "To create an alternative block of code based on the value of an expression"
      },
      "q311": {
        "question": "What is the purpose of the 'volatile' keyword in Java?",
        "options": [
          "To indicate that a variable may be changed by multiple threads simultaneously",
          "To make a variable immutable",
          "To define a constant",
          "To enforce encapsulation"
        ],
        "answer": "To indicate that a variable may be changed by multiple threads simultaneously"
      },
      "q312": {
        "question": "Explain the difference between 'ArrayList' and 'LinkedList' in Java.",
        "options": [
          "'ArrayList' is a resizable array, 'LinkedList' is a doubly linked list",
          "'ArrayList' is a linked list, 'LinkedList' is a resizable array",
          "'ArrayList' is faster for random access, 'LinkedList' is faster for insertions and deletions",
          "'ArrayList' and 'LinkedList' are interchangeable and can be used in the same scenarios"
        ],
        "answer": "'ArrayList' is faster for random access, 'LinkedList' is faster for insertions and deletions"
      },
      "q313": {
        "question": "What is the purpose of the 'transient' keyword in Java?",
        "options": [
          "To indicate that a variable is constant",
          "To make a variable immutable",
          "To specify that a variable should not be serialized",
          "To define a variable with thread-safe access"
        ],
        "answer": "To specify that a variable should not be serialized"
      },
      "q314": {
        "question": "Explain the concept of polymorphism in Java.",
        "options": [
          "Polymorphism allows a class to inherit from multiple classes",
          "Polymorphism allows a method to have multiple implementations",
          "Polymorphism allows a class to hide its implementation details",
          "Polymorphism allows a method to accept multiple parameters"
        ],
        "answer": "Polymorphism allows a method to have multiple implementations"
      },
      "q315": {
        "question": "What is the difference between 'HashSet' and 'TreeSet' in Java?",
        "options": [
          "'HashSet' is unordered and 'TreeSet' is ordered",
          "'HashSet' allows duplicate elements, 'TreeSet' does not",
          "'HashSet' uses a hash table for storage, 'TreeSet' uses a binary search tree",
          "'HashSet' is a subtype of 'TreeSet'"
        ],
        "answer": "'HashSet' is unordered and 'TreeSet' is ordered"
      },
      "q316": {
        "question": "Explain the concept of encapsulation in Java.",
        "options": [
          "Encapsulation allows a class to inherit from multiple classes",
          "Encapsulation allows a method to have multiple implementations",
          "Encapsulation allows a class to hide its implementation details and restrict access to its internal state",
          "Encapsulation allows a method to accept multiple parameters"
        ],
        "answer": "Encapsulation allows a class to hide its implementation details and restrict access to its internal state"
      },
      "q317": {
        "question": "What is the purpose of the 'final' keyword in Java?",
        "options": [
          "To indicate that a class cannot be inherited",
          "To specify that a variable is constant",
          "To define a constant",
          "To indicate that a method cannot be overridden"
        ],
        "answer": "To indicate that a class cannot be inherited"
      },
      "q318": {
        "question": "Explain the concept of abstract classes in Java.",
        "options": [
          "Abstract classes cannot have any abstract methods",
          "Abstract classes can be instantiated",
          "Abstract classes can have both abstract and concrete methods",
          "Abstract classes are always final"
        ],
        "answer": "Abstract classes can have both abstract and concrete methods"
      },
      "q319": {
        "question": "What is the purpose of the 'super' keyword in Java?",
        "options": [
          "To call the superclass constructor",
          "To refer to the current instance of a class",
          "To indicate a superclass method",
          "To access static members of a class"
        ],
        "answer": "To call the superclass constructor"
      },
      "q320": {
        "question": "Explain the concept of the 'try-with-resources' statement in Java.",
        "options": [
          "It is used to handle exceptions in a try-catch block",
          "It is used to automatically close resources like files or sockets",
          "It is used to create a new instance of a class",
          "It is used to create a block of code that always executes"
        ],
        "answer": "It is used to automatically close resources like files or sockets"
      },
      "q321": {
        "question": "What is the purpose of the 'StringBuilder' class in Java?",
        "options": [
          "To create immutable strings",
          "To manipulate strings without creating new objects",
          "To perform mathematical operations",
          "To convert strings to lowercase"
        ],
        "answer": "To manipulate strings without creating new objects"
      },
      "q322": {
        "question": "Explain the concept of interfaces in Java.",
        "options": [
          "Interfaces are used to define constants",
          "Interfaces are used to declare variables",
          "Interfaces are used to implement multiple inheritance",
          "Interfaces are used to define a class"
        ],
        "answer": "Interfaces are used to implement multiple inheritance"
      },
      "q323": {
        "question": "What is the difference between 'compareTo()' and 'equals()' methods in Java?",
        "options": [
          "'compareTo()' compares the content of strings, 'equals()' compares object references",
          "'equals()' compares the content of strings, 'compareTo()' compares object references",
          "Both 'compareTo()' and 'equals()' compare object references",
          "Neither 'compareTo()' nor 'equals()' can be used to compare strings"
        ],
        "answer": "'compareTo()' compares the content of strings, 'equals()' compares object references"
      },
      "q324": {
        "question": "Explain the concept of anonymous classes in Java.",
        "options": [
          "Anonymous classes are classes without a name",
          "Anonymous classes are final and cannot be extended",
          "Anonymous classes cannot implement interfaces",
          "Anonymous classes cannot have constructors"
        ],
        "answer": "Anonymous classes are classes without a name"
      },
      "q325": {
        "question": "What is the purpose of the 'ClassLoader' in Java?",
        "options": [
          "To load classes at runtime",
          "To create instances of classes",
          "To define class constants",
          "To handle exceptions"
        ],
        "answer": "To load classes at runtime"
      },
      "q326": {
        "question": "Explain the concept of the 'Decorator' design pattern in Java.",
        "options": [
          "Decorator pattern is used to create an object that behaves like another object",
          "Decorator pattern is used to add new functionalities to an object by wrapping it",
          "Decorator pattern is used to create an object without specifying its exact type",
          "Decorator pattern is used to define a family of algorithms"
        ],
        "answer": "Decorator pattern is used to add new functionalities to an object by wrapping it"
      },
      "q327": {
        "question": "What is the purpose of the 'Eclipse IDE' in Java development?",
        "options": [
          "To write and run Java code",
          "To create UML diagrams",
          "To manage databases",
          "To design user interfaces"
        ],
        "answer": "To write and run Java code"
      },
      "q328": {
        "question": "Explain the concept of the 'Observer' design pattern in Java.",
        "options": [
          "Observer pattern is used to create an object that behaves like another object",
          "Observer pattern is used to add new functionalities to an object by wrapping it",
          "Observer pattern is used to notify multiple objects about changes in the state of an object",
          "Observer pattern is used to define a family of algorithms"
        ],
        "answer": "Observer pattern is used to notify multiple objects about changes in the state of an object"
      },
      "q329": {
        "question": "What is the purpose of the 'Callable' interface in Java?",
        "options": [
          "To create threads",
          "To define a task that can be executed asynchronously and returns a result",
          "To handle exceptions",
          "To define a callback function"
        ],
        "answer": "To define a task that can be executed asynchronously and returns a result"
      },
      "q330": {
        "question": "Explain the concept of the 'Singleton' design pattern in Java.",
        "options": [
          "Singleton pattern is used to create an object that behaves like another object",
          "Singleton pattern is used to add new functionalities to an object by wrapping it",
          "Singleton pattern is used to ensure that a class has only one instance and provides a global point of access to it",
          "Singleton pattern is used to define a family of algorithms"
        ],
        "answer": "Singleton pattern is used to ensure that a class has only one instance and provides a global point of access to it"
      },
      "q331": {
        "question": "What is a design pattern in software development?",
        "options": [
          "A design template",
          "A programming language feature",
          "A solution to a common problem in a specific context",
          "A mathematical algorithm"
        ],
        "answer": "A solution to a common problem in a specific context"
      },
      "q332": {
        "question": "Explain the Singleton design pattern.",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Separates the construction of a complex object from its representation",
          "Provides an interface for creating instances of a class, but leaves the choice of its type to the subclasses"
        ],
        "answer": "Ensures a class has only one instance and provides a global point of access to it"
      },
      "q333": {
        "question": "What is the Observer design pattern?",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Provides an interface for creating instances of a class, but leaves the choice of its type to the subclasses"
        ],
        "answer": "Allows a subject to notify its dependents of a change in state"
      },
      "q334": {
        "question": "Explain the Factory Method design pattern.",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Provides an interface for creating instances of a class, but leaves the choice of its type to the subclasses"
        ],
        "answer": "Provides an interface for creating instances of a class, but leaves the choice of its type to the subclasses"
      },
      "q335": {
        "question": "What is the purpose of the Strategy design pattern?",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Provides an interface for creating instances of a class, but leaves the choice of its type to the subclasses"
        ],
        "answer": "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable"
      },
      "q336": {
        "question": "Explain the Builder design pattern.",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Separates the construction of a complex object from its representation"
        ],
        "answer": "Separates the construction of a complex object from its representation"
      },
      "q337": {
        "question": "What is the Chain of Responsibility design pattern?",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Passes the request along a chain of handlers"
        ],
        "answer": "Passes the request along a chain of handlers"
      },
      "q338": {
        "question": "Explain the Adapter design pattern.",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Allows the interface of an existing class to be used as another interface"
        ],
        "answer": "Allows the interface of an existing class to be used as another interface"
      },
      "q339": {
        "question": "What is the Template Method design pattern?",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Defines the skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm"
        ],
        "answer": "Defines the skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm"
      },
      "q340": {
        "question": "Explain the Command design pattern.",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Encapsulates a request as an object, thereby allowing for parameterization of clients with different requests"
        ],
        "answer": "Encapsulates a request as an object, thereby allowing for parameterization of clients with different requests"
      },
      "q341": {
        "question": "What is the Purpose of the Visitor Design Pattern?",
        "options": [
          "To define a family of algorithms, encapsulate each algorithm, and make them interchangeable",
          "To allow a subject to notify its dependents of a change in state",
          "To separate the construction of a complex object from its representation",
          "To represent an operation to be performed on elements of an object structure"
        ],
        "answer": "To represent an operation to be performed on elements of an object structure"
      },
      "q342": {
        "question": "Explain the State design pattern.",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Allows an object to alter its behavior when its internal state changes"
        ],
        "answer": "Allows an object to alter its behavior when its internal state changes"
      },
      "q343": {
        "question": "What is the Memento design pattern?",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Captures and externalizes an object's internal state, allowing the object to be restored to this state later"
        ],
        "answer": "Captures and externalizes an object's internal state, allowing the object to be restored to this state later"
      },
      "q344": {
        "question": "Explain the Prototype design pattern.",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Creates new objects by copying an existing object, known as the prototype"
        ],
        "answer": "Creates new objects by copying an existing object, known as the prototype"
      },
      "q345": {
        "question": "What is the Proxy design pattern?",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Controls access to an object by acting as an intermediary"
        ],
        "answer": "Controls access to an object by acting as an intermediary"
      },
      "q346": {
        "question": "Explain the Composite design pattern.",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Composes objects into tree structures to represent part-whole hierarchies"
        ],
        "answer": "Composes objects into tree structures to represent part-whole hierarchies"
      },
      "q347": {
        "question": "What is the Bridge design pattern?",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Separates an object’s abstraction from its implementation so that the two can vary independently"
        ],
        "answer": "Separates an object’s abstraction from its implementation so that the two can vary independently"
      },
      "q348": {
        "question": "Explain the Flyweight design pattern.",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Minimizes memory usage or computational expenses by sharing as much as possible with related objects"
        ],
        "answer": "Minimizes memory usage or computational expenses by sharing as much as possible with related objects"
      },
      "q349": {
        "question": "What is the Mediator design pattern?",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Defines an object that centralizes communication between other objects"
        ],
        "answer": "Defines an object that centralizes communication between other objects"
      },
      "q350": {
        "question": "Explain the Interpreter design pattern.",
        "options": [
          "Ensures a class has only one instance and provides a global point of access to it",
          "Defines a family of algorithms, encapsulates each algorithm, and makes them interchangeable",
          "Allows a subject to notify its dependents of a change in state",
          "Defines a grammar for interpreting the sentences in a language and provides an interpreter for the language"
        ],
        "answer": "Defines a grammar for interpreting the sentences in a language and provides an interpreter for the language"
      }
    }
    }
}
