{
  "quiz": {
    "q1": {
      "question": "What is React?",
      "options": [
        "A programming language",
        "A JavaScript library for building user interfaces",
        "A backend framework",
        "A database management system"
      ],
      "answer": "A JavaScript library for building user interfaces"
    },
    "q2": {
      "question": "What does JSX stand for in React?",
      "options": [
        "JavaScript XML",
        "Java XML",
        "JSON XML",
        "JavaScript Extension"
      ],
      "answer": "JavaScript XML"
    },
    "q3": {
      "question": "In React, what is the purpose of 'state'?",
      "options": [
        "To store and manage component data",
        "To define the structure of a component",
        "To handle component styling",
        "To manage routing in an application"
      ],
      "answer": "To store and manage component data"
    },
    "q4": {
      "question": "What is a React component?",
      "options": [
        "A function that returns JSX",
        "A data structure in React",
        "A stylesheet in React",
        "A built-in HTML element"
      ],
      "answer": "A function that returns JSX"
    },
    "q5": {
      "question": "What is the purpose of 'props' in React?",
      "options": [
        "To define component structure",
        "To handle component state",
        "To pass data from a parent component to a child component",
        "To style a component"
      ],
      "answer": "To pass data from a parent component to a child component"
    },
    "q6": {
      "question": "What is the React Virtual DOM?",
      "options": [
        "A virtual reality system for React applications",
        "A lightweight representation of the actual DOM in memory",
        "A tool for managing database queries in React",
        "A package manager for React"
      ],
      "answer": "A lightweight representation of the actual DOM in memory"
    },
    "q7": {
      "question": "What is the purpose of the 'componentDidMount' lifecycle method in React?",
      "options": [
        "To update the component state",
        "To perform cleanup before a component is unmounted",
        "To fetch data from an external API",
        "To initialize the component after it is rendered"
      ],
      "answer": "To initialize the component after it is rendered"
    },
    "q8": {
      "question": "What is React Router used for?",
      "options": [
        "To manage state in a React application",
        "To handle routing and navigation in a React application",
        "To connect React with a database",
        "To manage global application configuration"
      ],
      "answer": "To handle routing and navigation in a React application"
    },
    "q9": {
      "question": "What is the purpose of the 'useState' hook in React?",
      "options": [
        "To fetch data from an API",
        "To manage component state in functional components",
        "To define component props",
        "To create a new React component"
      ],
      "answer": "To manage component state in functional components"
    },
    "q10": {
      "question": "What is the purpose of the 'map' function in React?",
      "options": [
        "To iterate over an array and transform its elements",
        "To create a new array with a single element",
        "To connect React with Redux",
        "To define CSS styles for a component"
      ],
      "answer": "To iterate over an array and transform its elements"
    },
    "q11": {
      "question": "What is Redux in the context of React?",
      "options": [
        "A testing library for React applications",
        "A state management library for React applications",
        "A styling framework for React components",
        "A database system for React applications"
      ],
      "answer": "A state management library for React applications"
    },
    "q12": {
      "question": "What is the purpose of the 'key' attribute in React lists?",
      "options": [
        "To define a unique identifier for a component",
        "To specify the order of elements in a list",
        "To handle component events",
        "To define the color of list items"
      ],
      "answer": "To specify the order of elements in a list"
    },
    "q13": {
      "question": "What is the purpose of the 'className' attribute in React?",
      "options": [
        "To define a unique identifier for a component",
        "To specify the order of elements in a list",
        "To handle component events",
        "To apply CSS classes to a component"
      ],
      "answer": "To apply CSS classes to a component"
    },
    "q14": {
      "question": "What is a React Hook?",
      "options": [
        "A function that performs side effects in a functional component",
        "A tool for creating animations in React",
        "A package manager for React",
        "A component lifecycle method"
      ],
      "answer": "A function that performs side effects in a functional component"
    },
    "q15": {
      "question": "What is the purpose of the 'useEffect' hook in React?",
      "options": [
        "To create a new component",
        "To manage component state",
        "To perform side effects in a functional component",
        "To define component props"
      ],
      "answer": "To perform side effects in a functional component"
    },
    "q16": {
      "question": "What is the role of 'Redux Thunk' middleware in a React-Redux application?",
      "options": [
        "To handle routing in a React application",
        "To manage state in a React application",
        "To enable asynchronous actions in Redux",
        "To connect React with a database"
      ],
      "answer": "To enable asynchronous actions in Redux"
    },
    "q17": {
      "question": "What is the purpose of the 'forwardRef' function in React?",
      "options": [
        "To forward a function to a child component",
        "To create a reference to a DOM element",
        "To define forward references in React",
        "To forward a ref from a parent component to a child component"
      ],
      "answer": "To forward a ref from a parent component to a child component"
    },
    "q18": {
      "question": "What is the significance of 'controlled' and 'uncontrolled' components in React forms?",
      "options": [
        "To manage state in functional components",
        "To handle form validation",
        "To enable or disable form submission",
        "To manage the form data and its state"
      ],
      "answer": "To manage the form data and its state"
    },
    "q19": {
      "question": "What is the purpose of the 'dangerouslySetInnerHTML' attribute in React?",
      "options": [
        "To set the color of a component",
        "To handle component events",
        "To inject HTML directly into a component",
        "To define a unique identifier for a component"
      ],
      "answer": "To inject HTML directly into a component"
    },
    "q20": {
      "question": "How can you optimize performance in React applications?",
      "options": [
        "By using a slower rendering engine",
        "By minimizing the use of React components",
        "By implementing shouldComponentUpdate lifecycle method",
        "By avoiding the use of state and props"
      ],
      "answer": "By implementing shouldComponentUpdate lifecycle method"
    },
    "q21": {
      "question": "What is the purpose of the 'render' method in a React component?",
      "options": [
        "To handle component events",
        "To perform side effects",
        "To define the component's structure and UI",
        "To initialize the component state"
      ],
      "answer": "To define the component's structure and UI"
    },
    "q22": {
      "question": "What is the significance of 'props.children' in React?",
      "options": [
        "To pass data from parent to child components",
        "To access the child components directly",
        "To handle asynchronous operations",
        "To access and render the content between the opening and closing tags of a component"
      ],
      "answer": "To access and render the content between the opening and closing tags of a component"
    },
    "q23": {
      "question": "What is the purpose of the 'onClick' event handler in React?",
      "options": [
        "To handle mouse clicks on a component",
        "To trigger a form submission",
        "To initialize the component state",
        "To handle keyboard events"
      ],
      "answer": "To handle mouse clicks on a component"
    },
    "q24": {
      "question": "What is the purpose of the 'className' attribute in JSX?",
      "options": [
        "To define a unique identifier for a component",
        "To specify the order of elements in a list",
        "To handle component events",
        "To apply CSS classes to a component"
      ],
      "answer": "To apply CSS classes to a component"
    },
    "q25": {
      "question": "What is the significance of the 'key' prop in React lists?",
      "options": [
        "To define a unique identifier for a component",
        "To specify the order of elements in a list",
        "To handle component events",
        "To define the color of list items"
      ],
      "answer": "To define a unique identifier for a component"
    },
    "q26": {
      "question": "How do you conditionally render content in React?",
      "options": [
        "By using the 'if' statement directly in JSX",
        "By using the 'switch' statement",
        "By using the 'conditional' attribute in JSX",
        "By using JavaScript expressions in JSX"
      ],
      "answer": "By using JavaScript expressions in JSX"
    },
    "q27": {
      "question": "What is the purpose of the 'useState' hook in functional components?",
      "options": [
        "To fetch data from an API",
        "To manage component state",
        "To define component props",
        "To create a new React component"
      ],
      "answer": "To manage component state"
    },
    "q28": {
      "question": "What is the purpose of the 'useEffect' hook in React?",
      "options": [
        "To create a new component",
        "To manage component state",
        "To perform side effects in a functional component",
        "To define component props"
      ],
      "answer": "To perform side effects in a functional component"
    },
    "q29": {
      "question": "How do you pass data from a parent component to a child component in React?",
      "options": [
        "By using the 'data' attribute",
        "By using the 'passData' prop",
        "By using the 'getChildData' method",
        "By passing it as a prop"
      ],
      "answer": "By passing it as a prop"
    },
    "q30": {
      "question": "What is the purpose of the 'map' function in React?",
      "options": [
        "To iterate over an array and transform its elements",
        "To create a new array with a single element",
        "To connect React with Redux",
        "To define CSS styles for a component"
      ],
      "answer": "To iterate over an array and transform its elements"
    },
    "q31": {
      "question": "What is the significance of the 'ref' attribute in React?",
      "options": [
        "To create a reference to a DOM element",
        "To define the component's reference",
        "To manage component state",
        "To handle component events"
      ],
      "answer": "To create a reference to a DOM element"
    },
    "q32": {
      "question": "What is the purpose of the 'defaultProps' property in a React component?",
      "options": [
        "To define default styling for a component",
        "To specify the default state of a component",
        "To set default values for props",
        "To define the component's structure"
      ],
      "answer": "To set default values for props"
    },
    "q33": {
      "question": "What is the significance of the 'dangerouslySetInnerHTML' attribute in React?",
      "options": [
        "To set the color of a component",
        "To handle component events",
        "To inject HTML directly into a component",
        "To define a unique identifier for a component"
      ],
      "answer": "To inject HTML directly into a component"
    },
    "q34": {
      "question": "What is the purpose of the 'className' attribute in React?",
      "options": [
        "To define a unique identifier for a component",
        "To specify the order of elements in a list",
        "To handle component events",
        "To apply CSS classes to a component"
      ],
      "answer": "To apply CSS classes to a component"
    },
    "q35": {
      "question": "What is the purpose of the 'useState' hook in functional components?",
      "options": [
        "To fetch data from an API",
        "To manage component state",
        "To define component props",
        "To create a new React component"
      ],
      "answer": "To manage component state"
    },
    "q36": {
      "question": "What is the purpose of the 'useEffect' hook in React?",
      "options": [
        "To create a new component",
        "To manage component state",
        "To perform side effects in a functional component",
        "To define component props"
      ],
      "answer": "To perform side effects in a functional component"
    },
    "q37": {
      "question": "What is a React Hook?",
      "options": [
        "A function that performs side effects in a functional component",
        "A tool for creating animations in React",
        "A package manager for React",
        "A component lifecycle method"
      ],
      "answer": "A function that performs side effects in a functional component"
    },
    "q38": {
      "question": "What is the purpose of the 'forwardRef' function in React?",
      "options": [
        "To forward a function to a child component",
        "To create a reference to a DOM element",
        "To define forward references in React",
        "To forward a ref from a parent component to a child component"
      ],
      "answer": "To forward a ref from a parent component to a child component"
    },
    "q39": {
      "question": "What is the significance of 'controlled' and 'uncontrolled' components in React forms?",
      "options": [
        "To manage state in functional components",
        "To handle form validation",
        "To enable or disable form submission",
        "To manage the form data and its state"
      ],
      "answer": "To manage the form data and its state"
    },
    "q40": {
      "question": "How can you optimize performance in React applications?",
      "options": [
        "By using a slower rendering engine",
        "By minimizing the use of React components",
        "By implementing shouldComponentUpdate lifecycle method",
        "By avoiding the use of state and props"
      ],
      "answer": "By implementing shouldComponentUpdate lifecycle method"
    },
    "q41": {
      "question": "What is JSX in React?",
      "options": [
        "JavaScript XML",
        "Java XML",
        "JSON XML",
        "JavaScript Extension"
      ],
      "answer": "JavaScript XML"
    },
    "q42": {
      "question": "How do you create a functional component in React?",
      "options": [
        "class MyComponent extends Component",
        "function MyComponent()",
        "const MyComponent = () => {}",
        "create MyComponent() {}"
      ],
      "answer": "const MyComponent = () => {}"
    },
    "q43": {
      "question": "What is the purpose of the 'setState' method in React?",
      "options": [
        "To initialize state in a component",
        "To update the component's state",
        "To define the component's structure",
        "To handle component events"
      ],
      "answer": "To update the component's state"
    },
    "q44": {
      "question": "What is the React developer tool used for?",
      "options": [
        "To fetch data from an API",
        "To debug and inspect React components",
        "To create a new React component",
        "To manage component state"
      ],
      "answer": "To debug and inspect React components"
    },
    "q45": {
      "question": "What is the purpose of the 'className' attribute in JSX?",
      "options": [
        "To define a unique identifier for a component",
        "To specify the order of elements in a list",
        "To handle component events",
        "To apply CSS classes to a component"
      ],
      "answer": "To apply CSS classes to a component"
    },
    "q46": {
      "question": "What is the purpose of the 'key' prop in React lists?",
      "options": [
        "To define a unique identifier for a component",
        "To specify the order of elements in a list",
        "To handle component events",
        "To define the color of list items"
      ],
      "answer": "To define a unique identifier for a component"
    },
    "q47": {
      "question": "What is the significance of the 'ref' attribute in React?",
      "options": [
        "To create a reference to a DOM element",
        "To define the component's reference",
        "To manage component state",
        "To handle component events"
      ],
      "answer": "To create a reference to a DOM element"
    },
    "q48": {
      "question": "How do you handle forms in React?",
      "options": [
        "By using the 'form' tag directly",
        "By using the 'onFormSubmit' event",
        "By using the 'form' attribute in JSX",
        "By using state and event handlers"
      ],
      "answer": "By using state and event handlers"
    },
    "q49": {
      "question": "What is the purpose of the 'map' function in React?",
      "options": [
        "To iterate over an array and transform its elements",
        "To create a new array with a single element",
        "To connect React with Redux",
        "To define CSS styles for a component"
      ],
      "answer": "To iterate over an array and transform its elements"
    },
    "q50": {
      "question": "What is the purpose of the 'componentWillUnmount' lifecycle method?",
      "options": [
        "To update the component state",
        "To fetch data from an external API",
        "To perform cleanup before a component is unmounted",
        "To define the component's structure"
      ],
      "answer": "To perform cleanup before a component is unmounted"
    },
    "q51": {
      "question": "What is the purpose of the 'dangerouslySetInnerHTML' attribute in React?",
      "options": [
        "To set the color of a component",
        "To handle component events",
        "To inject HTML directly into a component",
        "To define a unique identifier for a component"
      ],
      "answer": "To inject HTML directly into a component"
    },
    "q52": {
      "question": "How can you conditionally render components in React?",
      "options": [
        "By using the 'if' statement directly in JSX",
        "By using the 'switch' statement",
        "By using the 'conditional' attribute in JSX",
        "By using JavaScript expressions in JSX"
      ],
      "answer": "By using JavaScript expressions in JSX"
    },
    "q53": {
      "question": "What is the purpose of the 'propTypes' property in a React component?",
      "options": [
        "To define default values for props",
        "To specify the types of props a component should receive",
        "To manage component state",
        "To create a reference to a DOM element"
      ],
      "answer": "To specify the types of props a component should receive"
    },
    "q54": {
      "question": "What is the purpose of the 'useReducer' hook in React?",
      "options": [
        "To create a new component",
        "To manage component state",
        "To perform side effects in a functional component",
        "To manage complex state logic"
      ],
      "answer": "To manage complex state logic"
    },
    "q55": {
      "question": "What is the purpose of the 'memo' function in React?",
      "options": [
        "To memoize functions and prevent unnecessary re-renders",
        "To create a new component",
        "To manage component state",
        "To perform side effects in a functional component"
      ],
      "answer": "To memoize functions and prevent unnecessary re-renders"
    },
    "q56": {
      "question": "What is the purpose of the 'shouldComponentUpdate' lifecycle method?",
      "options": [
        "To update the component state",
        "To fetch data from an external API",
        "To control whether a component should re-render",
        "To define the component's structure"
      ],
      "answer": "To control whether a component should re-render"
    },
    "q57": {
      "question": "How do you include external CSS styles in a React component?",
      "options": [
        "By using the 'css' attribute in JSX",
        "By linking an external CSS file in the component",
        "By using the 'style' attribute in JSX",
        "By importing the styles directly into the component"
      ],
      "answer": "By importing the styles directly into the component"
    },
    "q58": {
      "question": "What is the purpose of the 'React.Fragment' component?",
      "options": [
        "To create a new component",
        "To define the structure of a component",
        "To group multiple elements without adding extra nodes to the DOM",
        "To manage component state"
      ],
      "answer": "To group multiple elements without adding extra nodes to the DOM"
    },
    "q59": {
      "question": "What is the purpose of the 'useCallback' hook in React?",
      "options": [
        "To memoize functions and prevent unnecessary re-renders",
        "To create a new component",
        "To manage component state",
        "To handle asynchronous operations"
      ],
      "answer": "To memoize functions and prevent unnecessary re-renders"
    },
    "q60": {
      "question": "What is the role of 'React.PureComponent' in React?",
      "options": [
        "To create a new component",
        "To manage component state",
        "To perform side effects in a functional component",
        "To optimize performance by shallowly comparing props and state"
      ],
      "answer": "To optimize performance by shallowly comparing props and state"
    },
    "q62": {
      "question": "What are the key advantages of using React Native for mobile app development?",
      "options": [
        "Native performance, cross-platform compatibility, and a single codebase",
        "Limited performance, exclusive to iOS, and complex development process",
        "Dependence on native code, high development cost, and a steep learning curve",
        "Incompatibility with third-party libraries, slow updates, and lack of community support"
      ],
      "answer": "Native performance, cross-platform compatibility, and a single codebase"
    },
    "q63": {
      "question": "How does React Native achieve cross-platform compatibility?",
      "options": [
        "By compiling JavaScript to native code for each platform",
        "By using platform-specific languages for each platform",
        "By running JavaScript code in a web view",
        "By relying on native APIs without abstraction"
      ],
      "answer": "By compiling JavaScript to native code for each platform"
    },
    "q64": {
      "question": "What is Expo in the context of React Native?",
      "options": [
        "A native module for handling animations",
        "A development toolchain and library for simplifying React Native development",
        "A UI component library for React Native",
        "An alternative framework for building mobile apps"
      ],
      "answer": "A development toolchain and library for simplifying React Native development"
    },
    "q65": {
      "question": "How does React Native handle navigation between screens?",
      "options": [
        "By using traditional web navigation with links",
        "By relying on native navigation controllers",
        "By rendering all screens in a single component",
        "By using Redux for navigation"
      ],
      "answer": "By relying on native navigation controllers"
    },
    "q66": {
      "question": "What is the purpose of 'StyleSheet' in React Native?",
      "options": [
        "To define the structure of a React Native component",
        "To manage the layout of a React Native component",
        "To apply styles to a React Native component",
        "To import external stylesheets"
      ],
      "answer": "To apply styles to a React Native component"
    },
    "q67": {
      "question": "What is the significance of 'AsyncStorage' in React Native?",
      "options": [
        "To handle asynchronous operations in React Native components",
        "To store small amounts of data persistently on the device",
        "To manage the state of a React Native component",
        "To define asynchronous functions in React Native"
      ],
      "answer": "To store small amounts of data persistently on the device"
    },
    "q68": {
      "question": "How can you integrate third-party native modules in a React Native project?",
      "options": [
        "By using the 'react-native install' command",
        "By writing native code in Java and Swift",
        "By including the module as a JavaScript library",
        "By relying on the Expo framework"
      ],
      "answer": "By writing native code in Java and Swift"
    },
    "q69": {
      "question": "What is the purpose of the 'FlatList' component in React Native?",
      "options": [
        "To create a flat list of elements with no styling",
        "To render a list of data with custom styling and high performance",
        "To manage the state of a React Native component",
        "To define the structure of a React Native component"
      ],
      "answer": "To render a list of data with custom styling and high performance"
    },
    "q70": {
      "question": "How does React Native handle touch gestures and user interactions?",
      "options": [
        "By relying on the browser's native event handling",
        "By using a separate library for gestures",
        "By integrating with native touch events on each platform",
        "By avoiding touch gestures in favor of button clicks"
      ],
      "answer": "By integrating with native touch events on each platform"
    },
    "q71": {
      "question": "What is the purpose of the 'react-native-cli'?",
      "options": [
        "To create a new React Native project",
        "To handle asynchronous operations in React Native components",
        "To manage the state of a React Native component",
        "To define the structure of a React Native component"
      ],
      "answer": "To create a new React Native project"
    },
    "q72": {
      "question": "How does React Native handle performance optimization for mobile devices?",
      "options": [
        "By relying on the performance of the device's browser",
        "By using native APIs for animations and transitions",
        "By avoiding complex UI components",
        "By using a slower rendering engine"
      ],
      "answer": "By using native APIs for animations and transitions"
    },
    "q73": {
      "question": "What is the purpose of the 'react-native-vector-icons' library in React Native?",
      "options": [
        "To handle vector graphics in React Native components",
        "To integrate SVG images in React Native projects",
        "To create custom icons using native code",
        "To import third-party font-based icons into React Native projects"
      ],
      "answer": "To import third-party font-based icons into React Native projects"
    },
    "q74": {
      "question": "How does React Native handle platform-specific code?",
      "options": [
        "By using the 'Platform' module to conditionally execute code",
        "By creating separate codebases for each platform",
        "By relying on the Expo framework",
        "By using a third-party library for platform-specific code"
      ],
      "answer": "By using the 'Platform' module to conditionally execute code"
    },
    "q75": {
      "question": "What is the purpose of the 'react-navigation' library in React Native?",
      "options": [
        "To handle asynchronous operations in React Native components",
        "To manage the state of a React Native component",
        "To define the structure of a React Native component",
        "To handle navigation and routing in React Native applications"
      ],
      "answer": "To handle navigation and routing in React Native applications"
    },
    "q76": {
      "question": "How can you integrate Firebase with a React Native project?",
      "options": [
        "By using the 'react-native-firebase' library",
        "By relying on native Firebase SDKs",
        "By including Firebase as a JavaScript library",
        "By using the 'firebase install' command"
      ],
      "answer": "By using the 'react-native-firebase' library"
    },
    "q77": {
      "question": "What is the purpose of the 'ActivityIndicator' component in React Native?",
      "options": [
        "To create an animated loading indicator",
        "To define the structure of a React Native component",
        "To handle asynchronous operations in React Native components",
        "To manage the state of a React Native component"
      ],
      "answer": "To create an animated loading indicator"
    },
    "q78": {
      "question": "How does React Native handle the device's camera?",
      "options": [
        "By using a separate camera module",
        "By relying on native camera APIs",
        "By avoiding camera integration in React Native",
        "By using a third-party library for camera access"
      ],
      "answer": "By relying on native camera APIs"
    },
    "q79": {
      "question": "What is the purpose of the 'Linking' module in React Native?",
      "options": [
        "To manage navigation between screens",
        "To handle asynchronous operations in React Native components",
        "To define the structure of a React Native component",
        "To open external URLs and deep links"
      ],
      "answer": "To open external URLs and deep links"
    },
    "q80": {
      "question": "How can you debug a React Native application?",
      "options": [
        "By using the browser's developer tools",
        "By relying on native mobile debugging tools",
        "By using the 'console.log' statement",
        "By avoiding debugging due to cross-platform compatibility"
      ],
      "answer": "By relying on native mobile debugging tools"
    }


  }
}
